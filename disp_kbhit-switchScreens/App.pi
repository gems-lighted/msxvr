class App implements DOS_Program{
	properties:
		app   = null;
		con   = null;
		tools = null;
		keyb  = null;	
		
	defines:
        BLINK_SPEED = 2500;
	
	
	virtual Start(){
		app = this;
		con = GetDOS().GetConsole();
		tools = new CTools(this);
		keyb  = new CKeyboard(this);	
		Go();	
	}
	
	function Go(){
        con.SetColor(15, 5, 5);
		con.cls();	
		
		/* Prepare two screens */
		_scr1 = new CScreen(this);	
		_scr1.PutBox("black",0,0,78, 5, "Black");
		_scr1.PutBox("red",0,6,19, 7, "Red");
		_scr1.PutBox("yellow",20,6,58, 7, "Yellow");	
		_scr1.PutLabel("white", 24, 12, "a screen to be toggled ");					
		_scr1.PutLabel("white", 0, 20, "ESC-quit   |   [/white] F1-Screen1 [/def]     |  [/black] F2-Screen2 [/def]");
		_scr2 = new CScreen(this);	
		_scr2.PutBox("yellow",0,0,78, 5, "yellow");
		_scr2.PutBox("black",0,6,19, 7);
		_scr2.PutBox("red",20,6,58, 7, "mit Text");
		_scr2.PutLabel("white", 21, 8, "this is the other screen .");
		_scr2.PutLabel("white", 0, 20, "ESC-quit   |   [/black] F1-Screen1 [/def]     |   [/white]F2-Screen2 [/def]  ");
	    /* add two screens to screenBuffers */
		_scrBuffers = [];
		_scrBuffers += [_scr1];		
		_scrBuffers += [_scr2];	
		
		/* output all screenbuffer one after the other */
		_amntScreenBuffers = sizeof(_scrBuffers);
		_curBufNo = 0; // selectin first buffer
		_curBuf = _scrBuffers[_curBufNo];
		_curBuf.dumpScreen2();	
		_rememberCurBufNo = _curBufNo;
		do {
		
			_pressedKey = keyb.kbhit(100);
		   
			switch (_pressedKey){
				case KEY_F1 : {
					_curBufNo = 0;
				}break;
				case KEY_F2 : {
					_curBufNo = 1;
				}break;
				default: {
					con.Locate(0,0);
					// con.Print("Received: " + _pressedKey);
					//	con.Print("      1 is " + KEY_1 + " and 2 is " + KEY_2);
				}
				
			}
			if (_rememberCurBufNo != _curBufNo){
				 
				con.cls();
				_curBuf = _scrBuffers[_curBufNo];
				_curBuf.dumpScreen2();	
				_rememberCurBufNo = _curBufNo;
				tools.sleep(100);
			}
		
		
		
		}while (_pressedKey != KEY_ESCAPE);
		
				
	    End(0); 
	}
}
